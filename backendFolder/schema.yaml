openapi: 3.0.3
info:
  title: Team Airbnb Car Rental API
  version: 1.0.0
  description: API for car rental
paths:
  /api/v1/admin/cars/:
    get:
      operationId: admin_cars_list
      description: Admin can create, update, delete, and list cars.
      parameters:
      - in: query
        name: make
        schema:
          type: string
        description: Filter by car make
      - in: query
        name: model
        schema:
          type: string
        description: Filter by car model
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Admin Cars
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCarList'
              examples:
                CarExample:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - make: toyota
                      model: corolla
                      year: 2022
                      car_type: sedan
                      color: blue
                      seats: 5
                      transmission: automatic
                      fuel_type: petrol
                      has_ac: true
                      has_gps: false
                      hourly_rate: '20.00'
                      deposit_amount: '100.00'
                      is_available: true
                      is_active: true
                      availability_status: available
                      created_at: '2025-10-02T12:00:00Z'
                      updated_at: '2025-10-02T12:00:00Z'
                  summary: Car Example
          description: ''
    post:
      operationId: admin_cars_create
      description: Admin can create, update, delete, and list cars.
      parameters:
      - in: query
        name: make
        schema:
          type: string
        description: Filter by car make
      - in: query
        name: model
        schema:
          type: string
        description: Filter by car model
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Admin Cars
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Car'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Car'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCarList'
              examples:
                CarExample:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - make: toyota
                      model: corolla
                      year: 2022
                      car_type: sedan
                      color: blue
                      seats: 5
                      transmission: automatic
                      fuel_type: petrol
                      has_ac: true
                      has_gps: false
                      hourly_rate: '20.00'
                      deposit_amount: '100.00'
                      is_available: true
                      is_active: true
                      availability_status: available
                      created_at: '2025-10-02T12:00:00Z'
                      updated_at: '2025-10-02T12:00:00Z'
                  summary: Car Example
          description: ''
  /api/v1/admin/cars/{id}/:
    get:
      operationId: admin_cars_list_2
      description: Admin can create, update, delete, and list cars.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this car.
        required: true
      - in: query
        name: make
        schema:
          type: string
        description: Filter by car make
      - in: query
        name: model
        schema:
          type: string
        description: Filter by car model
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Admin Cars
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCarList'
              examples:
                CarExample:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - make: toyota
                      model: corolla
                      year: 2022
                      car_type: sedan
                      color: blue
                      seats: 5
                      transmission: automatic
                      fuel_type: petrol
                      has_ac: true
                      has_gps: false
                      hourly_rate: '20.00'
                      deposit_amount: '100.00'
                      is_available: true
                      is_active: true
                      availability_status: available
                      created_at: '2025-10-02T12:00:00Z'
                      updated_at: '2025-10-02T12:00:00Z'
                  summary: Car Example
          description: ''
    put:
      operationId: admin_cars_update
      description: Admin can create, update, delete, and list cars.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this car.
        required: true
      - in: query
        name: make
        schema:
          type: string
        description: Filter by car make
      - in: query
        name: model
        schema:
          type: string
        description: Filter by car model
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Admin Cars
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Car'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Car'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCarList'
              examples:
                CarExample:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - make: toyota
                      model: corolla
                      year: 2022
                      car_type: sedan
                      color: blue
                      seats: 5
                      transmission: automatic
                      fuel_type: petrol
                      has_ac: true
                      has_gps: false
                      hourly_rate: '20.00'
                      deposit_amount: '100.00'
                      is_available: true
                      is_active: true
                      availability_status: available
                      created_at: '2025-10-02T12:00:00Z'
                      updated_at: '2025-10-02T12:00:00Z'
                  summary: Car Example
          description: ''
    patch:
      operationId: admin_cars_partial_update
      description: Admin can create, update, delete, and list cars.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this car.
        required: true
      - in: query
        name: make
        schema:
          type: string
        description: Filter by car make
      - in: query
        name: model
        schema:
          type: string
        description: Filter by car model
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Admin Cars
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCar'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCar'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCar'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCarList'
              examples:
                CarExample:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - make: toyota
                      model: corolla
                      year: 2022
                      car_type: sedan
                      color: blue
                      seats: 5
                      transmission: automatic
                      fuel_type: petrol
                      has_ac: true
                      has_gps: false
                      hourly_rate: '20.00'
                      deposit_amount: '100.00'
                      is_available: true
                      is_active: true
                      availability_status: available
                      created_at: '2025-10-02T12:00:00Z'
                      updated_at: '2025-10-02T12:00:00Z'
                  summary: Car Example
          description: ''
    delete:
      operationId: admin_cars_destroy
      description: Admin can create, update, delete, and list cars.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this car.
        required: true
      - in: query
        name: make
        schema:
          type: string
        description: Filter by car make
      - in: query
        name: model
        schema:
          type: string
        description: Filter by car model
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Admin Cars
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCarList'
              examples:
                CarExample:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - make: toyota
                      model: corolla
                      year: 2022
                      car_type: sedan
                      color: blue
                      seats: 5
                      transmission: automatic
                      fuel_type: petrol
                      has_ac: true
                      has_gps: false
                      hourly_rate: '20.00'
                      deposit_amount: '100.00'
                      is_available: true
                      is_active: true
                      availability_status: available
                      created_at: '2025-10-02T12:00:00Z'
                      updated_at: '2025-10-02T12:00:00Z'
                  summary: Car Example
          description: ''
  /api/v1/app/guest-signup/:
    post:
      operationId: app_guest_signup_create
      description: "\n    Creates a guest user account.\n- Returns JWT access and\
        \ refresh tokens for authentication.\n- Guest users have limited access and\
        \ reservations expire in 3 days.\n- No password or email required.\n- The\
        \ response includes the guest user's ID, username, is_guest flag, and JWT\
        \ tokens.\n    "
      tags:
      - app
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: Guest user ID.
                  username:
                    type: string
                    description: Generated guest username.
                  is_guest:
                    type: boolean
                    description: True if user is a guest.
                  access:
                    type: string
                    description: JWT access token.
                  refresh:
                    type: string
                    description: JWT refresh token.
                required:
                - id
                - username
                - is_guest
                - access
                - refresh
          description: ''
  /api/v1/app/profile/:
    get:
      operationId: app_profile_retrieve
      tags:
      - app
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
          description: ''
  /api/v1/app/profile/change-password/:
    put:
      operationId: app_profile_change_password_update
      description: "\n    Changes the user's password. Requires the current password\
        \ and the new password as parameters.\n    "
      tags:
      - app
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  description: Current password of the user.
                new_password:
                  type: string
                  description: New password to set.
              required:
              - current_password
              - new_password
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Password updated successfully.
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Current password is incorrect.
          description: ''
  /api/v1/app/profile/update/:
    put:
      operationId: app_profile_update_update
      description: "\n    Updates the user's profile. Accepts avatar image upload\
        \ and other profile fields.\nFor guest users, only limited fields may be editable.\
        \ The avatar field should be sent as a file in multipart/form-data.\n    "
      tags:
      - app
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  description: First name of the user.
                last_name:
                  type: string
                  description: Last name of the user.
                email:
                  type: string
                  description: Email address.
                phone_number:
                  type: string
                  description: Phone number.
                country:
                  type: string
                  description: Country.
                state:
                  type: string
                  description: State.
                address:
                  type: string
                  description: Address.
                avatar:
                  type: string
                  format: binary
                  description: Avatar image file.
              required:
              - avatar
          multipart/form-data:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  description: First name of the user.
                last_name:
                  type: string
                  description: Last name of the user.
                email:
                  type: string
                  description: Email address.
                phone_number:
                  type: string
                  description: Phone number.
                country:
                  type: string
                  description: Country.
                state:
                  type: string
                  description: State.
                address:
                  type: string
                  description: Address.
                avatar:
                  type: string
                  format: binary
                  description: Avatar image file.
              required:
              - avatar
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Invalid data.
          description: ''
  /api/v1/auth/jwt/create/:
    post:
      operationId: auth_jwt_create_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/v1/auth/jwt/refresh/:
    post:
      operationId: auth_jwt_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/v1/auth/jwt/verify/:
    post:
      operationId: auth_jwt_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /api/v1/auth/users/:
    get:
      operationId: auth_users_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCustomUserList'
          description: ''
    post:
      operationId: auth_users_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomUserCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomUserCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomUserCreate'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUserCreate'
          description: ''
  /api/v1/auth/users/{id}/:
    get:
      operationId: auth_users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
          description: ''
    put:
      operationId: auth_users_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomUser'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
          description: ''
    patch:
      operationId: auth_users_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCustomUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCustomUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCustomUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
          description: ''
    delete:
      operationId: auth_users_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/auth/users/activation/:
    post:
      operationId: auth_users_activation_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Activation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Activation'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activation'
          description: ''
  /api/v1/auth/users/me/:
    get:
      operationId: auth_users_me_retrieve
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
          description: ''
    put:
      operationId: auth_users_me_update
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomUser'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
          description: ''
    patch:
      operationId: auth_users_me_partial_update
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCustomUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCustomUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCustomUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
          description: ''
    delete:
      operationId: auth_users_me_destroy
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/auth/users/resend_activation/:
    post:
      operationId: auth_users_resend_activation_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /api/v1/auth/users/reset_password/:
    post:
      operationId: auth_users_reset_password_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /api/v1/auth/users/reset_password_confirm/:
    post:
      operationId: auth_users_reset_password_confirm_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirm'
          description: ''
  /api/v1/auth/users/reset_username/:
    post:
      operationId: auth_users_reset_username_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /api/v1/auth/users/reset_username_confirm/:
    post:
      operationId: auth_users_reset_username_confirm_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameResetConfirm'
          description: ''
  /api/v1/auth/users/set_password/:
    post:
      operationId: auth_users_set_password_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetPassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetPassword'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetPassword'
          description: ''
  /api/v1/auth/users/set_username/:
    post:
      operationId: auth_users_set_username_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUsername'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetUsername'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetUsername'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetUsername'
          description: ''
  /api/v1/bookings/create:
    post:
      operationId: bookings_create_create
      description: "\n    Books a car using a reservation.\nSend a POST request with\
        \ a valid reservation_id.\nReservation must have status 'soft' or 'firm'.\n\
        Returns booking details on success.\n    "
      tags:
      - bookings
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reservation_id:
                  type: integer
                  description: ID of the reservation to book.
              required:
              - reservation_id
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid reservation status
          description: ''
  /api/v1/cars/:
    get:
      operationId: cars_list
      description: Users can list and retrieve available cars.
      parameters:
      - in: query
        name: car_type
        schema:
          type: string
          enum:
          - convertible
          - coupe
          - hatchback
          - sedan
          - suv
        description: |-
          * `suv` - SUV
          * `sedan` - Sedan
          * `hatchback` - Hatchback
          * `coupe` - Coupe
          * `convertible` - Convertible
      - in: query
        name: color
        schema:
          type: string
      - in: query
        name: fuel_type
        schema:
          type: string
          enum:
          - diesel
          - electric
          - hybrid
          - petrol
        description: |-
          * `petrol` - Petrol
          * `diesel` - Diesel
          * `electric` - Electric
          * `hybrid` - Hybrid
      - in: query
        name: has_ac
        schema:
          type: boolean
      - in: query
        name: has_gps
        schema:
          type: boolean
      - in: query
        name: make
        schema:
          type: string
        description: Filter by car make
      - in: query
        name: model
        schema:
          type: string
        description: Filter by car model
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: seats
        schema:
          type: integer
      - in: query
        name: transmission
        schema:
          type: string
          enum:
          - automatic
          - manual
        description: |-
          * `automatic` - Automatic
          * `manual` - Manual
      - in: query
        name: year
        schema:
          type: integer
      tags:
      - User Cars
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCarList'
              examples:
                CarExample:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - make: toyota
                      model: corolla
                      year: 2022
                      car_type: sedan
                      color: blue
                      seats: 5
                      transmission: automatic
                      fuel_type: petrol
                      has_ac: true
                      has_gps: false
                      hourly_rate: '20.00'
                      deposit_amount: '100.00'
                      is_available: true
                      is_active: true
                      availability_status: available
                      created_at: '2025-10-02T12:00:00Z'
                      updated_at: '2025-10-02T12:00:00Z'
                  summary: Car Example
          description: ''
  /api/v1/cars/{id}/:
    get:
      operationId: cars_list_2
      description: Users can list and retrieve available cars.
      parameters:
      - in: query
        name: car_type
        schema:
          type: string
          enum:
          - convertible
          - coupe
          - hatchback
          - sedan
          - suv
        description: |-
          * `suv` - SUV
          * `sedan` - Sedan
          * `hatchback` - Hatchback
          * `coupe` - Coupe
          * `convertible` - Convertible
      - in: query
        name: color
        schema:
          type: string
      - in: query
        name: fuel_type
        schema:
          type: string
          enum:
          - diesel
          - electric
          - hybrid
          - petrol
        description: |-
          * `petrol` - Petrol
          * `diesel` - Diesel
          * `electric` - Electric
          * `hybrid` - Hybrid
      - in: query
        name: has_ac
        schema:
          type: boolean
      - in: query
        name: has_gps
        schema:
          type: boolean
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this car.
        required: true
      - in: query
        name: make
        schema:
          type: string
        description: Filter by car make
      - in: query
        name: model
        schema:
          type: string
        description: Filter by car model
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: seats
        schema:
          type: integer
      - in: query
        name: transmission
        schema:
          type: string
          enum:
          - automatic
          - manual
        description: |-
          * `automatic` - Automatic
          * `manual` - Manual
      - in: query
        name: year
        schema:
          type: integer
      tags:
      - User Cars
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCarList'
              examples:
                CarExample:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - make: toyota
                      model: corolla
                      year: 2022
                      car_type: sedan
                      color: blue
                      seats: 5
                      transmission: automatic
                      fuel_type: petrol
                      has_ac: true
                      has_gps: false
                      hourly_rate: '20.00'
                      deposit_amount: '100.00'
                      is_available: true
                      is_active: true
                      availability_status: available
                      created_at: '2025-10-02T12:00:00Z'
                      updated_at: '2025-10-02T12:00:00Z'
                  summary: Car Example
          description: ''
  /api/v1/reservations/:
    get:
      operationId: reservations_list
      tags:
      - reservations
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
          description: ''
  /api/v1/reservations/create:
    post:
      operationId: reservations_create_create
      tags:
      - reservations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Reservation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Reservation'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
          description: ''
  /api/v1/reservations/delete/{id}/:
    delete:
      operationId: reservations_delete_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - reservations
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    Activation:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
      required:
      - token
      - uid
    AvailabilityStatusEnum:
      enum:
      - available
      - rented
      - maintenance
      - unavailable
      type: string
      description: |-
        * `available` - Available
        * `rented` - Rented
        * `maintenance` - Maintenance
        * `unavailable` - Unavailable
    Booking:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        reservation:
          type: integer
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
      required:
      - end_date
      - id
      - reservation
      - start_date
      - user
    Car:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        make:
          $ref: '#/components/schemas/MakeEnum'
        model:
          $ref: '#/components/schemas/ModelEnum'
        year:
          type: integer
          maximum: 2026
          minimum: 2000
        car_type:
          $ref: '#/components/schemas/CarTypeEnum'
        color:
          type: string
          maxLength: 30
        seats:
          type: integer
          maximum: 2147483647
          minimum: 0
        transmission:
          $ref: '#/components/schemas/TransmissionEnum'
        fuel_type:
          $ref: '#/components/schemas/FuelTypeEnum'
        has_ac:
          type: boolean
        has_gps:
          type: boolean
        hourly_rate:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
        deposit_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
        is_available:
          type: boolean
        is_active:
          type: boolean
        availability_status:
          $ref: '#/components/schemas/AvailabilityStatusEnum'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - car_type
      - color
      - created_at
      - deposit_amount
      - fuel_type
      - hourly_rate
      - id
      - make
      - model
      - seats
      - transmission
      - updated_at
      - year
    CarTypeEnum:
      enum:
      - suv
      - sedan
      - hatchback
      - coupe
      - convertible
      type: string
      description: |-
        * `suv` - SUV
        * `sedan` - Sedan
        * `hatchback` - Hatchback
        * `coupe` - Coupe
        * `convertible` - Convertible
    CustomUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        phone_number:
          type: string
          maxLength: 15
        license_number:
          type: string
          nullable: true
          maxLength: 20
        license_expiry:
          type: string
          format: date
          nullable: true
        country:
          type: string
          nullable: true
          maxLength: 50
        state:
          type: string
          nullable: true
          maxLength: 50
        address:
          type: string
          nullable: true
          maxLength: 255
        is_guest:
          type: boolean
      required:
      - id
      - phone_number
      - username
    CustomUserCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        password:
          type: string
          writeOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        phone_number:
          type: string
          maxLength: 15
        country:
          type: string
          nullable: true
          maxLength: 50
        state:
          type: string
          nullable: true
          maxLength: 50
        address:
          type: string
          nullable: true
          maxLength: 255
        is_guest:
          type: boolean
          readOnly: true
      required:
      - id
      - is_guest
      - password
      - phone_number
      - username
    FuelTypeEnum:
      enum:
      - petrol
      - diesel
      - electric
      - hybrid
      type: string
      description: |-
        * `petrol` - Petrol
        * `diesel` - Diesel
        * `electric` - Electric
        * `hybrid` - Hybrid
    MakeEnum:
      enum:
      - toyota
      - honda
      - ford
      - bmw
      - mercedes
      type: string
      description: |-
        * `toyota` - Toyota
        * `honda` - Honda
        * `ford` - Ford
        * `bmw` - BMW
        * `mercedes` - Mercedes
    ModelEnum:
      enum:
      - corolla
      - civic
      - mustang
      - x5
      - c-class
      type: string
      description: |-
        * `corolla` - Corolla
        * `civic` - Civic
        * `mustang` - Mustang
        * `x5` - X5
        * `c-class` - C-Class
    PaginatedCarList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Car'
    PaginatedCustomUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CustomUser'
    PasswordResetConfirm:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
        new_password:
          type: string
      required:
      - new_password
      - token
      - uid
    PatchedCar:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        make:
          $ref: '#/components/schemas/MakeEnum'
        model:
          $ref: '#/components/schemas/ModelEnum'
        year:
          type: integer
          maximum: 2026
          minimum: 2000
        car_type:
          $ref: '#/components/schemas/CarTypeEnum'
        color:
          type: string
          maxLength: 30
        seats:
          type: integer
          maximum: 2147483647
          minimum: 0
        transmission:
          $ref: '#/components/schemas/TransmissionEnum'
        fuel_type:
          $ref: '#/components/schemas/FuelTypeEnum'
        has_ac:
          type: boolean
        has_gps:
          type: boolean
        hourly_rate:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
        deposit_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
        is_available:
          type: boolean
        is_active:
          type: boolean
        availability_status:
          $ref: '#/components/schemas/AvailabilityStatusEnum'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedCustomUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        phone_number:
          type: string
          maxLength: 15
        license_number:
          type: string
          nullable: true
          maxLength: 20
        license_expiry:
          type: string
          format: date
          nullable: true
        country:
          type: string
          nullable: true
          maxLength: 50
        state:
          type: string
          nullable: true
          maxLength: 50
        address:
          type: string
          nullable: true
          maxLength: 255
        is_guest:
          type: boolean
    Reservation:
      type: object
      properties:
        car:
          type: integer
        status:
          allOf:
          - $ref: '#/components/schemas/StatusEnum'
          readOnly: true
        expires_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - car
      - created_at
      - expires_at
      - status
    SendEmailReset:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    SetPassword:
      type: object
      properties:
        new_password:
          type: string
        current_password:
          type: string
      required:
      - current_password
      - new_password
    SetUsername:
      type: object
      properties:
        current_password:
          type: string
        new_username:
          type: string
          title: Username
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
      - current_password
      - new_username
    StatusEnum:
      enum:
      - soft
      - firm
      - cancelled
      - expired
      - booked
      type: string
      description: |-
        * `soft` - Soft Reservation
        * `firm` - Firm Reservation
        * `cancelled` - Cancelled
        * `expired` - Expired
        * `booked` - Booked
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    TransmissionEnum:
      enum:
      - automatic
      - manual
      type: string
      description: |-
        * `automatic` - Automatic
        * `manual` - Manual
    UsernameResetConfirm:
      type: object
      properties:
        new_username:
          type: string
          title: Username
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
      - new_username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
